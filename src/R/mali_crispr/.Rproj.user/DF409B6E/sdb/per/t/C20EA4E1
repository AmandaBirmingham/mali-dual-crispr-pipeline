{
    "collab_server" : "",
    "contents" : "prepData=function(input_filename, nt){\n  X<-read.table(input_filename,sep=\"\\t\",header=TRUE)\n  \n  #preliminary preparations of the input data frame\n  data<-data.matrix(X[,6:(5+2*nt)])\n  good<-(X$geneA != X$geneB) #reject any constructs with two 0's\n  goodX<-X[good,] #the 0-0 constructs are gone\n  nn<-sum(good) #this many constructs\n  \n  cpA<-as.character(goodX$probeA)\n  ix<-grep(\"NonTargeting\",cpA)\n  cpA[ix]<-paste(\"0\",cpA[ix],sep=\"\") #this puts NonTargeting probes at the beginning of alphabetically sorted order\n  \n  cpB<-as.character(goodX$probeB)\n  ix<-grep(\"NonTargeting\",cpB)\n  cpB[ix]<-paste(\"0\",cpB[ix],sep=\"\")\n  \n  pswitch<-cpA>cpB #need to switch?\n  phold<-cpA[pswitch]\n  cpA[pswitch]<-cpB[pswitch]\n  cpB[pswitch]<-phold #cpA and cpB are always in alphabetical order, cpA < cpB\n  probes<-sort(unique(c(cpA,cpB))) #entire probe set in alphabetical order\n  return(probes)\n  \n  nprobes<-length(probes)\n  \n  cgA<-as.character(goodX$geneA)\n  cgB<-as.character(goodX$geneB)\n  genes<-sort(unique(cgA)) #should be 74 \"genes\"\n  n<-length(genes) # n = 74 if doing it by genes or 222 if doing it by probe\n  mm<-n*(n-1)/2\n  \n  gswitch<-cgA>cgB #need to switch?\n  ghold<-cgA[gswitch]\n  cgA[gswitch]<-cgB[gswitch]\n  cgB[gswitch]<-ghold\n  \n  gA_gB<-paste(cgA,cgB,sep=\"_\")\n  pA_pB<-paste(cpA,cpB,sep=\"_\")\n  goodX<-data.frame(goodX,cgA,cgB,gA_gB) #now gA_gB is ordered so that gA < gB\n  \n  gooddata<-data.matrix(goodX[,6:(5+2*nt)])\n  gooddata[gooddata==0]<-1 #pseudocounts\n  abundance<-apply(gooddata,2,sum)\n  y<-t(log2(t(gooddata)/abundance)) #log2 frequencies\n  #end data prep \n  return(list(nn=nn, probes=probes, nprobes=nprobes, genes=genes, n=n, pA_pB=pA_pB, y=y))\n}\n\ngetMeasurementColsAsMatrix=function(countsDf, numTimepoints){\n  data<-data.matrix(countsDf[,6:(5+2*numTimepoints)])\n  return(data)\n}\n\nexcludeConstructsForSameTwoGenes=function(countsDf){\n  good<-(countsDf$geneA != countsDf$geneB) #reject any constructs with two 0's\n  goodX<-countsDf[good,] #the 0-0 constructs are gone\n  return(goodX)\n}\n\nrenameNontargetingContentsForCol=function(filteredCountsDf, colName){\n  cpA<-as.character(filteredCountsDf[[colName]])\n  ix<-grep(\"NonTargeting\",cpA)\n  cpA[ix]<-paste(\"0\",cpA[ix],sep=\"\") #this puts NonTargeting probes at the beginning of alphabetically sorted order\n  return(cpA)\n}\n\norderItemsInVectorPairsAlphabetically=function(firstVector, secondVector){\n  pswitch<-firstVector>secondVector #need to switch?\n  phold<-firstVector[pswitch]\n  firstVector[pswitch]<-secondVector[pswitch]\n  secondVector[pswitch]<-phold #firstVector and secondVector are always in alphabetical order, firstVector < secondVector  \n  return(list(vector1=firstVector, vector2=secondVector))\n}\n\ngetSortedUniqueItems=function(firstVector, secondVector){\n  sortedUniques<-sort(unique(c(firstVector,secondVector))) #entire probe set in alphabetical order \n  return(sortedUniques)\n}\n\nprepDataChanged=function(input_filename, nt){\n  countsDf<-read.table(input_filename,sep=\"\\t\",header=TRUE)\n  goodX = excludeConstructsForSameTwoGenes(countsDf)\n  nn = nrow(goodX)\n  \n  cpA=renameNontargetingContentsForCol(goodX, \"probeA\")\n  cpB=renameNontargetingContentsForCol(goodX, \"probeB\")\n  probeVectors = orderItemsInVectorPairsAlphabetically(cpA, cpB)\n  probes<-getSortedUniqueItems(probeVectors$vector1, probeVectors$vector2)\n  return(probes)\n\n  cgA=renameNontargetingContentsForCol(goodX, \"geneA\")\n  cgB=renameNontargetingContentsForCol(goodX, \"geneB\")\n  geneVectors = orderItemsInVectorPairsAlphabetically(cgA, cgB)\n  genes<-getSortedUniqueItems(geneVectors$vector1, geneVectors$vector2)\n  \n  cgA = temp$vector1\n  cgB = temp$vector2  \n  gA_gB<-paste(cgA,cgB,sep=\"_\")\n  pA_pB<-paste(cpA,cpB,sep=\"_\")\n  goodX<-data.frame(goodX,cgA,cgB,gA_gB) #now gA_gB is ordered so that gA < gB\n  \n  gooddata<-getMeasurementColsAsMatrix(goodX, numTimepoints)\n  gooddata[gooddata==0]<-1 #pseudocounts\n  abundance<-apply(gooddata,2,sum)\n  y<-t(log2(t(gooddata)/abundance)) #log2 frequencies\n  #end data prep \n  #return(list(nn=nn, probes=probes, nprobes=nprobes, genes=genes, n=n, pA_pB=pA_pB, y=y))\n}\n\n",
    "created" : 1472516329027.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1618807570",
    "id" : "C20EA4E1",
    "lastKnownWriteTime" : 1472750797,
    "last_content_update" : 1472750797687,
    "path" : "~/Work/Repositories/ccbb_tickets/20161100_mali_crispr_software/src/R/mali_crispr/sample.R",
    "project_path" : "sample.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}