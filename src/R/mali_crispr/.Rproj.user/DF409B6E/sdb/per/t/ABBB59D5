{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Week 3 - ggplot2 intro\"\nauthor: \"Brian Stock\"\ndate: \"`r format(Sys.time(), '%d %B, %Y')`\"\ncss: styles.css\noutput:\n  html_document:\n    toc: false\n    number_sections: true\n---\n\n```{r setup, include = FALSE, message = FALSE}\nknitr::opts_chunk$set(echo = TRUE, cache = TRUE)\n```\n\n# Pull from the course Github\n\nThis is an intermediate R course adopted from a [Harvard tutorial](http://tutorials.iq.harvard.edu/R/Rgraphics/Rgraphics.html)\n\n* Assumes working knowledge of R\n* Relatively fast-paced\n* Focus is on `ggplot2` graphics--other packages will not be covered\n\n# Starting at the end\n\nGoal: reproduce this figure from the Economist:\n\n![](Economist1.png)\n\n# What is `ggplot2`?\n\nPopular alternative to \"base\" R graphics, especially for publication-quality plots.\n\n## Advantages of ggplot2\n\n* consistent underlying 'grammar of graphics' (Wilkinson 2005)\n* plot specification at a high level of abstraction\n* very flexible\n* theme system for polishing plot appearance\n* mature and complete graphics system\n* many users, active mailing list\n\n### Example: way less code for complex plot\n\nFrom http://varianceexplained.org/r/why-I-use-ggplot2/\n\n```{r eval=FALSE}\nggplot(top_data, aes(rate, expression, color = nutrient)) +\n    geom_point() +\n    geom_smooth(method = \"lm\", se = FALSE) +\n    facet_wrap(~name + systematic_name, scales = \"free_y\")\n```\n\n![](complex_ggplot2.png)\n\nNow create the same using base graphics:\n\n```{r eval=FALSE}\npar(mar = c(1.5, 1.5, 1.5, 1.5))\n\ncolors <- 1:6\nnames(colors) <- unique(top_data$nutrient)\n\n# legend approach from http://stackoverflow.com/a/10391001/712603\nm <- matrix(c(1:20, 21, 21, 21, 21), nrow = 6, ncol = 4, byrow = TRUE)\nlayout(mat = m, heights = c(.18, .18, .18, .18, .18, .1))\n\ntop_data$combined <- paste(top_data$name, top_data$systematic_name)\nfor (gene in unique(top_data$combined)) {\n    sub_data <- filter(top_data, combined == gene)\n    plot(expression ~ rate, sub_data, col = colors[sub_data$nutrient], main = gene)\n    for (n in unique(sub_data$nutrient)) {\n        m <- lm(expression ~ rate, filter(sub_data, nutrient == n))\n        if (!is.na(m$coefficients[2])) {\n            abline(m, col = colors[n])\n        }\n    }\n}\n\n# create a new plot for legend\nplot(1, type = \"n\", axes = FALSE, xlab = \"\", ylab = \"\")\nlegend(\"top\", names(colors), col = colors, horiz = TRUE, lwd = 4)\n```\n\n\n![](complex_base.png)\n\n## Other plotting packages can be better in certain cases:\n\n* quick exploratory plots can be simpler with base graphics\n\n```{r}\nplot(rnorm(100),rnorm(100))\n```\n\n* 3-d plots (`rgl` package, Week 8)\n* Interactive graphics (see `ggvis` and `gganimate` packages, or Shiny for GUI, Weeks 8 and 9)\n* Graph-theory type graphs (nodes/edges layout, see `igraph` package)\n\n# What Is this *Grammar Of Graphics*?\n\nBasic idea: independently specify plot building blocks and combine them to create just about any kind of graphical display you want. Building blocks of a graph include:\n\n* data\n* aesthetic mapping\n* geometric object\n* statistical transformations\n* scales\n* coordinate system\n* position adjustments\n* faceting\n\n![](ggplot_layers.png)\n![](ggplot_layers2.png)\n\n# Example Data: `Housing prices`\n\nData from https://www.lincolninst.edu/subcenters/land-values/land-prices-by-state.asp\n\n```{r}\nhousing <- read.csv(\"landdata-states.csv\")\nhead(housing[1:5])\n```\n\n```{r}\nhousing$Year <- as.numeric(substr(housing$Date, 1, 4))\nhousing$Qrtr <- as.numeric(substr(housing$Date, 5, 5))\nhousing$Date <- housing$Year + housing$Qrtr/4\n```\n\n## Compared to base graphics, `ggplot2`:\n\n* is more verbose for simple / canned graphics\n* is less verbose for complex / custom graphics\n* does not have methods (data should always be in a `data.frame`)\n* uses a different system for adding plot elements\n\n### Base graphics histogram example:\n\n```{r}\nhist(housing$Home.Value)\n```\n\n### `ggplot2` histogram example:\n\n```{r}\nlibrary(ggplot2)\nggplot(housing, aes(x = Home.Value)) +\n  geom_histogram()\n```\n\nBase wins for simple plot!\n\n### Base colored scatter plot example:\n\n```{r}\nplot(Home.Value ~ Date,\n     data=subset(housing, State == \"MA\"))\npoints(Home.Value ~ Date, col=\"red\",\n       data=subset(housing, State == \"TX\"))\nlegend(1975, 400000,\n       c(\"MA\", \"TX\"), title=\"State\",\n       col=c(\"black\", \"red\"),\n       pch=c(1, 1))\n```\n\n### `ggplot2` colored scatter plot example:\n\n```{r}\nggplot(subset(housing, State %in% c(\"MA\", \"TX\")),\n       aes(x=Date,\n           y=Home.Value,\n           color=State))+\n  geom_point()\n```\n\nggplot2 wins for more complex plot!\n\n# Geometric Objects And Aesthetics\n\n## Aesthetic Mapping\n\nIn ggplot land **aesthetic** means *something you can see*. Examples include:\n\n* position (i.e., on the x and y axes)\n* color (\"outside\" color)\n* fill (\"inside\" color)\n* shape (of points)\n* linetype\n* size\n\nEach type of geom accepts only a subset of all aestheticsâ€“refer to the geom help pages to see what mappings each geom accepts. Aesthetic mappings are set with the `aes()` function.\n\n## Geometic Objects (`geom`)\n\nGeometric objects are the actual marks we put on a plot. Examples include:\n\n* points (`geom_point`, for scatter plots, dot plots, etc)\n* lines (`geom_line`, for time series, trend lines, etc)\n* boxplot (`geom_boxplot`, for ...duh, boxplots)\n\nA plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the `+` operator\n\nYou can get a list of available geometric objects using the code below:\n```{r}\nhelp.search(\"geom_\", package = \"ggplot2\")\n```\n\nOr simply type `geom_<tab>` in RStudio to see a list of functions starting with `geom_`\n\n## Points (Scatterplot)\n\nNow that we know about geometric objects and aesthetic mapping, we can make a ggplot. `geom_point` requires mappings for x and y, the `aes()`. All others are optional.\n\n```{r}\nhp2001Q1 <- subset(housing, Date == 2001.25) \nggplot(hp2001Q1,\n       aes(y = Structure.Cost, x = Land.Value)) +\n  geom_point()\n```\n\nSame thing but log transform the Land Values:\n\n```{r}\nggplot(hp2001Q1,\n       aes(y = Structure.Cost, x = log(Land.Value))) +\n  geom_point()\n```\n\n## Lines (Prediction Line)\n\nA plot constructed with `ggplot` can have more than one geom. In that case the mappings established in the `ggplot()` call are plot defaults that can be added to or overridden. Our plot could use a regression line:\n\n```{r}\nhp2001Q1$pred.SC <- predict(lm(Structure.Cost ~ log(Land.Value), data = hp2001Q1))\n\np1 <- ggplot(hp2001Q1, aes(x = log(Land.Value), y = Structure.Cost))\n\np1 + geom_point(aes(color = Home.Value)) +\n  geom_line(aes(y = pred.SC))\n```\n\n## Smoothers\n\nNot all geometric objects are simple shapes---`geom_smooth` includes a line and a ribbon.  Hooray for confidence intervals!\n\n```{r}\np1 +\n  geom_point(aes(color = Home.Value)) +\n  geom_smooth()\n```\n\n## Text (Label Points)\n\nEach `geom` accepts a particualar set of mappings. For example, `geom_text()` accepts a `labels` mapping.\n\n```{r}\np1 + \n  geom_text(aes(label=State), size = 3)\n```\n\n```{r}\n## install.packages(\"ggrepel\") \nlibrary(\"ggrepel\")\np1 + \n  geom_point() + \n  geom_text_repel(aes(label=State), size = 3)\n```\n\n## Aesthetic Mapping VS Assignment\n\nNote that *variables* are mapped to aesthetics with the `aes()` function, while *fixed* aesthetics (i.e. want to apply to ALL points) are set outside the `aes()` call. This sometimes leads to confusion, as in this example:\n\n```{r}\np1 +\n  geom_point(aes(size = 2))# incorrect! 2 is not a variable\n```\n\n```{r}\np1 +\n  geom_point(size = 5, color=\"red\") # correct, not in aes()\n```\n\n## Mapping Variables To Other Aesthetics\n\nOther aesthetics are mapped in the same way as x and y in the previous example.\n\n```{r}\np1 +\n  geom_point(aes(color=Home.Value, shape = region))\n```\n\n# Now you try!\n\nExample data consist of *Human Development Index* and *Corruption Perception Index* scores for several countries. The data is in the `EconomistData.csv` file. Read it in with:\n\n```{r}\ndat <- read.csv(\"EconomistData.csv\")\nhead(dat)\n```\n\nNow try:\n\n1.  Create a scatter plot with CPI on the x axis and HDI on the y axis.\n2.  Color the points in the previous plot blue.\n3.  Color the points in the previous plot according to *Region*.\n4.  Create boxplots of CPI by Region\n5.  Overlay points on top of the box plots\n\n# Resources\n\n* Basis for this lesson 1: [Harvard tutorial](http://tutorials.iq.harvard.edu/R/Rgraphics/Rgraphics.html)\n* Basis for this lesson 2: [Hadley slides](http://ggplot2.org/resources/2007-vanderbilt.pdf)\n* [Hadley book PDF](http://roger.ucsd.edu/record=b6914994~S9)\n* [Hadley slides on ggplot2 motivation and examples](http://ggplot2.org/resources/2007-past-present-future.pdf)\n* [Doesn't like ggplot so much](http://simplystatistics.org/2016/02/11/why-i-dont-use-ggplot2/)\n* [Response to above, pro-ggplot](http://varianceexplained.org/r/why-I-use-ggplot2/)\n* [Reasons to use ggplot system](https://mandymejia.wordpress.com/2013/11/13/10-reasons-to-switch-to-ggplot-7/)\n\n",
    "created" : 1485467103615.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1272959862",
    "id" : "ABBB59D5",
    "lastKnownWriteTime" : 1485461642,
    "last_content_update" : 1485461642,
    "path" : "~/Desktop/Intro-Data-Viz-Winter-2017-master/week-3/week-3-ggplot2-intro.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}